{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Pattern_Laboratory_Project_NeuralNetwork.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "0SqIiL_BNouS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f33bc8cb-9bfd-481e-9a5f-7e547f6e74bf"
      },
      "source": [
        "import tensorflow as tf\n",
        "tf.test.gpu_device_name()\n",
        "from tensorflow.python.client import device_lib\n",
        "device_lib.list_local_devices()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[name: \"/device:CPU:0\"\n",
              " device_type: \"CPU\"\n",
              " memory_limit: 268435456\n",
              " locality {\n",
              " }\n",
              " incarnation: 6306977145516150380, name: \"/device:GPU:0\"\n",
              " device_type: \"GPU\"\n",
              " memory_limit: 14509932544\n",
              " locality {\n",
              "   bus_id: 1\n",
              "   links {\n",
              "   }\n",
              " }\n",
              " incarnation: 13706858463374797490\n",
              " physical_device_desc: \"device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\"]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uv4rkopOO1lR"
      },
      "source": [
        "import pandas as pd\n",
        "from pandas.api.types import is_string_dtype\n",
        "data = pd.read_csv('healthcare-dataset-stroke-data.csv', na_values='N/A')\n",
        "\n",
        "for column in data.columns:\n",
        "    if (is_string_dtype(data[column].dtype)):\n",
        "        data[column] = data[column].str.strip()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O-5B78RkO5fJ"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X = data.loc[:, data.columns != 'stroke']\n",
        "X = X.loc[:, X.columns != 'id']\n",
        "y = data['stroke']\n",
        "y = y ^ 1\n",
        "train_val_X, test_X, train_val_y, test_y = train_test_split(X,y,test_size=0.2,stratify=y)\n",
        "train_X, val_X, train_y, val_y = train_test_split(train_val_X, train_val_y, test_size=0.125,stratify=train_val_y) # 70 train - 10 validation - 20 test"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "15fXgOcePW3x"
      },
      "source": [
        "from sklearn.impute import SimpleImputer\n",
        "from pandas.api.types import is_string_dtype\n",
        "\n",
        "si_train_X = pd.DataFrame()\n",
        "si_val_X = pd.DataFrame()\n",
        "si_test_X = pd.DataFrame()\n",
        "\n",
        "for column in train_X.columns:\n",
        "  if (is_string_dtype(train_X[column].dtype)):\n",
        "    si = SimpleImputer(strategy='most_frequent')\n",
        "  else:\n",
        "    si = SimpleImputer(strategy='median')\n",
        "  si.fit(train_X[[column]])\n",
        "  si_train_X[column] = si.transform(train_X[[column]]).flatten()\n",
        "  si_val_X[column] = si.transform(val_X[[column]]).flatten()\n",
        "  si_test_X[column] = si.transform(test_X[[column]]).flatten()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pm6x3aN_PYbx"
      },
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "le.fit(train_y)\n",
        "train_y = le.transform(train_y)\n",
        "val_y = le.transform(val_y)\n",
        "test_y = le.transform(test_y)\n",
        "\n",
        "categorical_feature = ['gender','ever_married','work_type','Residence_type','smoking_status']\n",
        "l_train_X = pd.DataFrame()\n",
        "l_val_X = pd.DataFrame()\n",
        "l_test_X = pd.DataFrame()\n",
        "\n",
        "for column in train_X.columns:\n",
        "  if column in categorical_feature:\n",
        "    le.fit(si_train_X[column])\n",
        "    l_train_X[column] = le.transform(si_train_X[column])\n",
        "    l_val_X[column] = le.transform(si_val_X[column])\n",
        "    l_test_X[column] = le.transform(si_test_X[column])\n",
        "  else:\n",
        "    l_train_X[column] = si_train_X[column].copy()\n",
        "    l_val_X[column] = si_val_X[column].copy()\n",
        "    l_test_X[column] = si_test_X[column].copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V3_mZtY2PcZJ"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "ss = StandardScaler()\n",
        "ss.fit(l_train_X)\n",
        "ss_train_X = ss.transform(l_train_X)\n",
        "ss_val_X = ss.transform(l_val_X)\n",
        "ss_test_X = ss.transform(l_test_X)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sd-iLh2dPgQp",
        "outputId": "aaff45dd-741b-4efa-e352-2a2330202a30"
      },
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "model = Sequential()\n",
        "model.add(Dense(100,input_dim=10,activation='relu'))\n",
        "model.add(Dense(1000,activation='relu'))\n",
        "model.add(Dense(10000,activation='relu'))\n",
        "model.add(Dense(1000,activation='relu'))\n",
        "model.add(Dense(100,activation='relu'))\n",
        "model.add(Dense(10,activation='relu'))\n",
        "model.add(Dense(1,activation='sigmoid'))\n",
        "model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
        "print(model.summary())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense (Dense)                (None, 100)               1100      \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1000)              101000    \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 10000)             10010000  \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 1000)              10001000  \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 100)               100100    \n",
            "_________________________________________________________________\n",
            "dense_5 (Dense)              (None, 10)                1010      \n",
            "_________________________________________________________________\n",
            "dense_6 (Dense)              (None, 1)                 11        \n",
            "=================================================================\n",
            "Total params: 20,214,221\n",
            "Trainable params: 20,214,221\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 865
        },
        "id": "mTg0p8DFQJhR",
        "outputId": "8bf212e4-2190-456f-d00a-4312dd244842"
      },
      "source": [
        "from keras.utils.vis_utils import plot_model\n",
        "plot_model(model,to_file='model.png',show_shapes=True,show_layer_names=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Qpif3_BaQMlx",
        "outputId": "15cd6753-d487-43b2-ea96-f82df4b7d92d"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "es = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=200)\n",
        "mc = ModelCheckpoint('best_model.h5',monitor='val_loss',mode='min',verbose=1,save_best_only=True)\n",
        "\n",
        "hist = model.fit(ss_train_X,train_y,validation_data=(ss_val_X,val_y), epochs=2000,batch_size=512,callbacks=[es,mc])\n",
        "plt.plot(hist.history['loss'],label='train')\n",
        "plt.plot(hist.history['val_loss'],label='test')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/2000\n",
            "7/7 [==============================] - 14s 109ms/step - loss: 0.4536 - accuracy: 0.6683 - val_loss: 0.2595 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00001: val_loss improved from inf to 0.25946, saving model to best_model.h5\n",
            "Epoch 2/2000\n",
            "7/7 [==============================] - 0s 24ms/step - loss: 0.2062 - accuracy: 0.9539 - val_loss: 0.1970 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00002: val_loss improved from 0.25946 to 0.19695, saving model to best_model.h5\n",
            "Epoch 3/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.1775 - accuracy: 0.9476 - val_loss: 0.1942 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00003: val_loss improved from 0.19695 to 0.19419, saving model to best_model.h5\n",
            "Epoch 4/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.1661 - accuracy: 0.9482 - val_loss: 0.2001 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00004: val_loss did not improve from 0.19419\n",
            "Epoch 5/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.1530 - accuracy: 0.9533 - val_loss: 0.1737 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00005: val_loss improved from 0.19419 to 0.17371, saving model to best_model.h5\n",
            "Epoch 6/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.1537 - accuracy: 0.9493 - val_loss: 0.1801 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00006: val_loss did not improve from 0.17371\n",
            "Epoch 7/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.1407 - accuracy: 0.9501 - val_loss: 0.1804 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00007: val_loss did not improve from 0.17371\n",
            "Epoch 8/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.1438 - accuracy: 0.9515 - val_loss: 0.1849 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00008: val_loss did not improve from 0.17371\n",
            "Epoch 9/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.1391 - accuracy: 0.9496 - val_loss: 0.1823 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00009: val_loss did not improve from 0.17371\n",
            "Epoch 10/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.1362 - accuracy: 0.9523 - val_loss: 0.1855 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00010: val_loss did not improve from 0.17371\n",
            "Epoch 11/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.1180 - accuracy: 0.9582 - val_loss: 0.1898 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00011: val_loss did not improve from 0.17371\n",
            "Epoch 12/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.1318 - accuracy: 0.9518 - val_loss: 0.1932 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00012: val_loss did not improve from 0.17371\n",
            "Epoch 13/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.1295 - accuracy: 0.9514 - val_loss: 0.1911 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00013: val_loss did not improve from 0.17371\n",
            "Epoch 14/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.1163 - accuracy: 0.9520 - val_loss: 0.1955 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00014: val_loss did not improve from 0.17371\n",
            "Epoch 15/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.1129 - accuracy: 0.9514 - val_loss: 0.2021 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00015: val_loss did not improve from 0.17371\n",
            "Epoch 16/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.1035 - accuracy: 0.9522 - val_loss: 0.2051 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00016: val_loss did not improve from 0.17371\n",
            "Epoch 17/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.1017 - accuracy: 0.9506 - val_loss: 0.2094 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00017: val_loss did not improve from 0.17371\n",
            "Epoch 18/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0950 - accuracy: 0.9535 - val_loss: 0.2199 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00018: val_loss did not improve from 0.17371\n",
            "Epoch 19/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0939 - accuracy: 0.9540 - val_loss: 0.2217 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00019: val_loss did not improve from 0.17371\n",
            "Epoch 20/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0967 - accuracy: 0.9467 - val_loss: 0.2395 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00020: val_loss did not improve from 0.17371\n",
            "Epoch 21/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0900 - accuracy: 0.9508 - val_loss: 0.2467 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00021: val_loss did not improve from 0.17371\n",
            "Epoch 22/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0843 - accuracy: 0.9503 - val_loss: 0.2264 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00022: val_loss did not improve from 0.17371\n",
            "Epoch 23/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0787 - accuracy: 0.9535 - val_loss: 0.2286 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00023: val_loss did not improve from 0.17371\n",
            "Epoch 24/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0863 - accuracy: 0.9552 - val_loss: 0.2380 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00024: val_loss did not improve from 0.17371\n",
            "Epoch 25/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0796 - accuracy: 0.9539 - val_loss: 0.2508 - val_accuracy: 0.9511\n",
            "\n",
            "Epoch 00025: val_loss did not improve from 0.17371\n",
            "Epoch 26/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0751 - accuracy: 0.9547 - val_loss: 0.2690 - val_accuracy: 0.9413\n",
            "\n",
            "Epoch 00026: val_loss did not improve from 0.17371\n",
            "Epoch 27/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0730 - accuracy: 0.9700 - val_loss: 0.3183 - val_accuracy: 0.9354\n",
            "\n",
            "Epoch 00027: val_loss did not improve from 0.17371\n",
            "Epoch 28/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0693 - accuracy: 0.9699 - val_loss: 0.2930 - val_accuracy: 0.9393\n",
            "\n",
            "Epoch 00028: val_loss did not improve from 0.17371\n",
            "Epoch 29/2000\n",
            "7/7 [==============================] - 0s 18ms/step - loss: 0.0654 - accuracy: 0.9694 - val_loss: 0.3371 - val_accuracy: 0.9335\n",
            "\n",
            "Epoch 00029: val_loss did not improve from 0.17371\n",
            "Epoch 30/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0619 - accuracy: 0.9747 - val_loss: 0.3232 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00030: val_loss did not improve from 0.17371\n",
            "Epoch 31/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0604 - accuracy: 0.9749 - val_loss: 0.3314 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00031: val_loss did not improve from 0.17371\n",
            "Epoch 32/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0618 - accuracy: 0.9748 - val_loss: 0.3442 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00032: val_loss did not improve from 0.17371\n",
            "Epoch 33/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0560 - accuracy: 0.9778 - val_loss: 0.4197 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00033: val_loss did not improve from 0.17371\n",
            "Epoch 34/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0624 - accuracy: 0.9742 - val_loss: 0.4334 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00034: val_loss did not improve from 0.17371\n",
            "Epoch 35/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0705 - accuracy: 0.9658 - val_loss: 0.4318 - val_accuracy: 0.9295\n",
            "\n",
            "Epoch 00035: val_loss did not improve from 0.17371\n",
            "Epoch 36/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0573 - accuracy: 0.9758 - val_loss: 0.3318 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00036: val_loss did not improve from 0.17371\n",
            "Epoch 37/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0490 - accuracy: 0.9803 - val_loss: 0.3646 - val_accuracy: 0.9256\n",
            "\n",
            "Epoch 00037: val_loss did not improve from 0.17371\n",
            "Epoch 38/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0489 - accuracy: 0.9809 - val_loss: 0.4675 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00038: val_loss did not improve from 0.17371\n",
            "Epoch 39/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0485 - accuracy: 0.9768 - val_loss: 0.3403 - val_accuracy: 0.8904\n",
            "\n",
            "Epoch 00039: val_loss did not improve from 0.17371\n",
            "Epoch 40/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0638 - accuracy: 0.9670 - val_loss: 0.3514 - val_accuracy: 0.8904\n",
            "\n",
            "Epoch 00040: val_loss did not improve from 0.17371\n",
            "Epoch 41/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0526 - accuracy: 0.9806 - val_loss: 0.4384 - val_accuracy: 0.9393\n",
            "\n",
            "Epoch 00041: val_loss did not improve from 0.17371\n",
            "Epoch 42/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0456 - accuracy: 0.9800 - val_loss: 0.3932 - val_accuracy: 0.9276\n",
            "\n",
            "Epoch 00042: val_loss did not improve from 0.17371\n",
            "Epoch 43/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0357 - accuracy: 0.9852 - val_loss: 0.4532 - val_accuracy: 0.8963\n",
            "\n",
            "Epoch 00043: val_loss did not improve from 0.17371\n",
            "Epoch 44/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0368 - accuracy: 0.9833 - val_loss: 0.4417 - val_accuracy: 0.9041\n",
            "\n",
            "Epoch 00044: val_loss did not improve from 0.17371\n",
            "Epoch 45/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0374 - accuracy: 0.9818 - val_loss: 0.4596 - val_accuracy: 0.9256\n",
            "\n",
            "Epoch 00045: val_loss did not improve from 0.17371\n",
            "Epoch 46/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0311 - accuracy: 0.9898 - val_loss: 0.4737 - val_accuracy: 0.8963\n",
            "\n",
            "Epoch 00046: val_loss did not improve from 0.17371\n",
            "Epoch 47/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0335 - accuracy: 0.9833 - val_loss: 0.4871 - val_accuracy: 0.9119\n",
            "\n",
            "Epoch 00047: val_loss did not improve from 0.17371\n",
            "Epoch 48/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0288 - accuracy: 0.9879 - val_loss: 0.4906 - val_accuracy: 0.9295\n",
            "\n",
            "Epoch 00048: val_loss did not improve from 0.17371\n",
            "Epoch 49/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0224 - accuracy: 0.9907 - val_loss: 0.5407 - val_accuracy: 0.9276\n",
            "\n",
            "Epoch 00049: val_loss did not improve from 0.17371\n",
            "Epoch 50/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0207 - accuracy: 0.9931 - val_loss: 0.5328 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00050: val_loss did not improve from 0.17371\n",
            "Epoch 51/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0295 - accuracy: 0.9891 - val_loss: 0.5917 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00051: val_loss did not improve from 0.17371\n",
            "Epoch 52/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0325 - accuracy: 0.9886 - val_loss: 0.4712 - val_accuracy: 0.9080\n",
            "\n",
            "Epoch 00052: val_loss did not improve from 0.17371\n",
            "Epoch 53/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0276 - accuracy: 0.9872 - val_loss: 0.5060 - val_accuracy: 0.9295\n",
            "\n",
            "Epoch 00053: val_loss did not improve from 0.17371\n",
            "Epoch 54/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0221 - accuracy: 0.9917 - val_loss: 0.5060 - val_accuracy: 0.9315\n",
            "\n",
            "Epoch 00054: val_loss did not improve from 0.17371\n",
            "Epoch 55/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0236 - accuracy: 0.9888 - val_loss: 0.5891 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00055: val_loss did not improve from 0.17371\n",
            "Epoch 56/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0251 - accuracy: 0.9900 - val_loss: 0.5962 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00056: val_loss did not improve from 0.17371\n",
            "Epoch 57/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0198 - accuracy: 0.9917 - val_loss: 0.6133 - val_accuracy: 0.8826\n",
            "\n",
            "Epoch 00057: val_loss did not improve from 0.17371\n",
            "Epoch 58/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0218 - accuracy: 0.9935 - val_loss: 0.6272 - val_accuracy: 0.9315\n",
            "\n",
            "Epoch 00058: val_loss did not improve from 0.17371\n",
            "Epoch 59/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0199 - accuracy: 0.9922 - val_loss: 0.6461 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00059: val_loss did not improve from 0.17371\n",
            "Epoch 60/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0189 - accuracy: 0.9927 - val_loss: 0.6178 - val_accuracy: 0.9315\n",
            "\n",
            "Epoch 00060: val_loss did not improve from 0.17371\n",
            "Epoch 61/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0288 - accuracy: 0.9892 - val_loss: 0.6088 - val_accuracy: 0.9119\n",
            "\n",
            "Epoch 00061: val_loss did not improve from 0.17371\n",
            "Epoch 62/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0233 - accuracy: 0.9914 - val_loss: 0.4844 - val_accuracy: 0.9276\n",
            "\n",
            "Epoch 00062: val_loss did not improve from 0.17371\n",
            "Epoch 63/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0178 - accuracy: 0.9944 - val_loss: 0.5482 - val_accuracy: 0.9295\n",
            "\n",
            "Epoch 00063: val_loss did not improve from 0.17371\n",
            "Epoch 64/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0239 - accuracy: 0.9925 - val_loss: 0.5283 - val_accuracy: 0.9080\n",
            "\n",
            "Epoch 00064: val_loss did not improve from 0.17371\n",
            "Epoch 65/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0207 - accuracy: 0.9921 - val_loss: 0.5293 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00065: val_loss did not improve from 0.17371\n",
            "Epoch 66/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0196 - accuracy: 0.9922 - val_loss: 0.5572 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00066: val_loss did not improve from 0.17371\n",
            "Epoch 67/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0213 - accuracy: 0.9915 - val_loss: 0.5247 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00067: val_loss did not improve from 0.17371\n",
            "Epoch 68/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0168 - accuracy: 0.9918 - val_loss: 0.5913 - val_accuracy: 0.8767\n",
            "\n",
            "Epoch 00068: val_loss did not improve from 0.17371\n",
            "Epoch 69/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0272 - accuracy: 0.9901 - val_loss: 0.6068 - val_accuracy: 0.9335\n",
            "\n",
            "Epoch 00069: val_loss did not improve from 0.17371\n",
            "Epoch 70/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0300 - accuracy: 0.9870 - val_loss: 0.5435 - val_accuracy: 0.9080\n",
            "\n",
            "Epoch 00070: val_loss did not improve from 0.17371\n",
            "Epoch 71/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0295 - accuracy: 0.9881 - val_loss: 0.5306 - val_accuracy: 0.9080\n",
            "\n",
            "Epoch 00071: val_loss did not improve from 0.17371\n",
            "Epoch 72/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0180 - accuracy: 0.9932 - val_loss: 0.6152 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00072: val_loss did not improve from 0.17371\n",
            "Epoch 73/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0127 - accuracy: 0.9944 - val_loss: 0.6566 - val_accuracy: 0.9002\n",
            "\n",
            "Epoch 00073: val_loss did not improve from 0.17371\n",
            "Epoch 74/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0112 - accuracy: 0.9954 - val_loss: 0.6971 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00074: val_loss did not improve from 0.17371\n",
            "Epoch 75/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0095 - accuracy: 0.9965 - val_loss: 0.8004 - val_accuracy: 0.9100\n",
            "\n",
            "Epoch 00075: val_loss did not improve from 0.17371\n",
            "Epoch 76/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0097 - accuracy: 0.9957 - val_loss: 0.7593 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00076: val_loss did not improve from 0.17371\n",
            "Epoch 77/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0109 - accuracy: 0.9952 - val_loss: 0.6982 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00077: val_loss did not improve from 0.17371\n",
            "Epoch 78/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0101 - accuracy: 0.9958 - val_loss: 0.7040 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00078: val_loss did not improve from 0.17371\n",
            "Epoch 79/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0102 - accuracy: 0.9960 - val_loss: 0.7154 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00079: val_loss did not improve from 0.17371\n",
            "Epoch 80/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0089 - accuracy: 0.9968 - val_loss: 0.7041 - val_accuracy: 0.9080\n",
            "\n",
            "Epoch 00080: val_loss did not improve from 0.17371\n",
            "Epoch 81/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0133 - accuracy: 0.9949 - val_loss: 0.7429 - val_accuracy: 0.9335\n",
            "\n",
            "Epoch 00081: val_loss did not improve from 0.17371\n",
            "Epoch 82/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0156 - accuracy: 0.9947 - val_loss: 0.6794 - val_accuracy: 0.8826\n",
            "\n",
            "Epoch 00082: val_loss did not improve from 0.17371\n",
            "Epoch 83/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0152 - accuracy: 0.9946 - val_loss: 0.7450 - val_accuracy: 0.9295\n",
            "\n",
            "Epoch 00083: val_loss did not improve from 0.17371\n",
            "Epoch 84/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0182 - accuracy: 0.9925 - val_loss: 0.6499 - val_accuracy: 0.8924\n",
            "\n",
            "Epoch 00084: val_loss did not improve from 0.17371\n",
            "Epoch 85/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0117 - accuracy: 0.9957 - val_loss: 0.7210 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00085: val_loss did not improve from 0.17371\n",
            "Epoch 86/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0108 - accuracy: 0.9951 - val_loss: 0.6811 - val_accuracy: 0.9119\n",
            "\n",
            "Epoch 00086: val_loss did not improve from 0.17371\n",
            "Epoch 87/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0106 - accuracy: 0.9960 - val_loss: 0.7111 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00087: val_loss did not improve from 0.17371\n",
            "Epoch 88/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0089 - accuracy: 0.9966 - val_loss: 0.7333 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00088: val_loss did not improve from 0.17371\n",
            "Epoch 89/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0085 - accuracy: 0.9974 - val_loss: 0.7686 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00089: val_loss did not improve from 0.17371\n",
            "Epoch 90/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0050 - accuracy: 0.9982 - val_loss: 0.7989 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00090: val_loss did not improve from 0.17371\n",
            "Epoch 91/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0037 - accuracy: 0.9980 - val_loss: 0.8380 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00091: val_loss did not improve from 0.17371\n",
            "Epoch 92/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0030 - accuracy: 0.9990 - val_loss: 0.8829 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00092: val_loss did not improve from 0.17371\n",
            "Epoch 93/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0041 - accuracy: 0.9983 - val_loss: 0.8967 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00093: val_loss did not improve from 0.17371\n",
            "Epoch 94/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0024 - accuracy: 0.9987 - val_loss: 0.9149 - val_accuracy: 0.9119\n",
            "\n",
            "Epoch 00094: val_loss did not improve from 0.17371\n",
            "Epoch 95/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0034 - accuracy: 0.9982 - val_loss: 0.9462 - val_accuracy: 0.9080\n",
            "\n",
            "Epoch 00095: val_loss did not improve from 0.17371\n",
            "Epoch 96/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0047 - accuracy: 0.9990 - val_loss: 0.9352 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00096: val_loss did not improve from 0.17371\n",
            "Epoch 97/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0044 - accuracy: 0.9983 - val_loss: 0.9347 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00097: val_loss did not improve from 0.17371\n",
            "Epoch 98/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0037 - accuracy: 0.9984 - val_loss: 0.9467 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00098: val_loss did not improve from 0.17371\n",
            "Epoch 99/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0031 - accuracy: 0.9987 - val_loss: 0.9584 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00099: val_loss did not improve from 0.17371\n",
            "Epoch 100/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0024 - accuracy: 0.9985 - val_loss: 0.9654 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00100: val_loss did not improve from 0.17371\n",
            "Epoch 101/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0028 - accuracy: 0.9985 - val_loss: 0.9906 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00101: val_loss did not improve from 0.17371\n",
            "Epoch 102/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0028 - accuracy: 0.9986 - val_loss: 1.0153 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00102: val_loss did not improve from 0.17371\n",
            "Epoch 103/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0017 - accuracy: 0.9984 - val_loss: 1.0387 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00103: val_loss did not improve from 0.17371\n",
            "Epoch 104/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0026 - accuracy: 0.9985 - val_loss: 1.0666 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00104: val_loss did not improve from 0.17371\n",
            "Epoch 105/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0046 - accuracy: 0.9974 - val_loss: 1.0701 - val_accuracy: 0.9100\n",
            "\n",
            "Epoch 00105: val_loss did not improve from 0.17371\n",
            "Epoch 106/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0032 - accuracy: 0.9986 - val_loss: 1.0410 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00106: val_loss did not improve from 0.17371\n",
            "Epoch 107/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0025 - accuracy: 0.9980 - val_loss: 1.0188 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00107: val_loss did not improve from 0.17371\n",
            "Epoch 108/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0033 - accuracy: 0.9979 - val_loss: 1.0258 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00108: val_loss did not improve from 0.17371\n",
            "Epoch 109/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0021 - accuracy: 0.9989 - val_loss: 1.0521 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00109: val_loss did not improve from 0.17371\n",
            "Epoch 110/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0023 - accuracy: 0.9987 - val_loss: 1.0816 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00110: val_loss did not improve from 0.17371\n",
            "Epoch 111/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0024 - accuracy: 0.9987 - val_loss: 1.1003 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00111: val_loss did not improve from 0.17371\n",
            "Epoch 112/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0088 - accuracy: 0.9968 - val_loss: 1.0607 - val_accuracy: 0.9276\n",
            "\n",
            "Epoch 00112: val_loss did not improve from 0.17371\n",
            "Epoch 113/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0220 - accuracy: 0.9954 - val_loss: 0.9147 - val_accuracy: 0.9041\n",
            "\n",
            "Epoch 00113: val_loss did not improve from 0.17371\n",
            "Epoch 114/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0129 - accuracy: 0.9954 - val_loss: 0.7732 - val_accuracy: 0.9022\n",
            "\n",
            "Epoch 00114: val_loss did not improve from 0.17371\n",
            "Epoch 115/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0184 - accuracy: 0.9927 - val_loss: 0.7804 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00115: val_loss did not improve from 0.17371\n",
            "Epoch 116/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0177 - accuracy: 0.9929 - val_loss: 0.6950 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00116: val_loss did not improve from 0.17371\n",
            "Epoch 117/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0168 - accuracy: 0.9937 - val_loss: 0.6803 - val_accuracy: 0.9276\n",
            "\n",
            "Epoch 00117: val_loss did not improve from 0.17371\n",
            "Epoch 118/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0160 - accuracy: 0.9934 - val_loss: 0.6823 - val_accuracy: 0.9080\n",
            "\n",
            "Epoch 00118: val_loss did not improve from 0.17371\n",
            "Epoch 119/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0136 - accuracy: 0.9939 - val_loss: 0.6454 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00119: val_loss did not improve from 0.17371\n",
            "Epoch 120/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0159 - accuracy: 0.9940 - val_loss: 0.6920 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00120: val_loss did not improve from 0.17371\n",
            "Epoch 121/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0116 - accuracy: 0.9964 - val_loss: 0.7236 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00121: val_loss did not improve from 0.17371\n",
            "Epoch 122/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0084 - accuracy: 0.9961 - val_loss: 0.7564 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00122: val_loss did not improve from 0.17371\n",
            "Epoch 123/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0064 - accuracy: 0.9977 - val_loss: 0.7594 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00123: val_loss did not improve from 0.17371\n",
            "Epoch 124/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0059 - accuracy: 0.9983 - val_loss: 0.7964 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00124: val_loss did not improve from 0.17371\n",
            "Epoch 125/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0058 - accuracy: 0.9979 - val_loss: 0.8010 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00125: val_loss did not improve from 0.17371\n",
            "Epoch 126/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0082 - accuracy: 0.9970 - val_loss: 0.8260 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00126: val_loss did not improve from 0.17371\n",
            "Epoch 127/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0043 - accuracy: 0.9979 - val_loss: 0.8902 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00127: val_loss did not improve from 0.17371\n",
            "Epoch 128/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0043 - accuracy: 0.9981 - val_loss: 0.8695 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00128: val_loss did not improve from 0.17371\n",
            "Epoch 129/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0079 - accuracy: 0.9972 - val_loss: 0.9019 - val_accuracy: 0.9276\n",
            "\n",
            "Epoch 00129: val_loss did not improve from 0.17371\n",
            "Epoch 130/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0082 - accuracy: 0.9977 - val_loss: 0.8690 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00130: val_loss did not improve from 0.17371\n",
            "Epoch 131/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0037 - accuracy: 0.9981 - val_loss: 0.8421 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00131: val_loss did not improve from 0.17371\n",
            "Epoch 132/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0068 - accuracy: 0.9969 - val_loss: 0.8353 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00132: val_loss did not improve from 0.17371\n",
            "Epoch 133/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0084 - accuracy: 0.9969 - val_loss: 0.8627 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00133: val_loss did not improve from 0.17371\n",
            "Epoch 134/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0039 - accuracy: 0.9985 - val_loss: 0.8941 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00134: val_loss did not improve from 0.17371\n",
            "Epoch 135/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0035 - accuracy: 0.9977 - val_loss: 0.9223 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00135: val_loss did not improve from 0.17371\n",
            "Epoch 136/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0027 - accuracy: 0.9991 - val_loss: 0.9564 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00136: val_loss did not improve from 0.17371\n",
            "Epoch 137/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0041 - accuracy: 0.9989 - val_loss: 0.9509 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00137: val_loss did not improve from 0.17371\n",
            "Epoch 138/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0052 - accuracy: 0.9982 - val_loss: 0.9396 - val_accuracy: 0.8943\n",
            "\n",
            "Epoch 00138: val_loss did not improve from 0.17371\n",
            "Epoch 139/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0068 - accuracy: 0.9986 - val_loss: 0.8905 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00139: val_loss did not improve from 0.17371\n",
            "Epoch 140/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0059 - accuracy: 0.9974 - val_loss: 0.8345 - val_accuracy: 0.9256\n",
            "\n",
            "Epoch 00140: val_loss did not improve from 0.17371\n",
            "Epoch 141/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0054 - accuracy: 0.9974 - val_loss: 0.8582 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00141: val_loss did not improve from 0.17371\n",
            "Epoch 142/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0044 - accuracy: 0.9982 - val_loss: 0.8896 - val_accuracy: 0.9256\n",
            "\n",
            "Epoch 00142: val_loss did not improve from 0.17371\n",
            "Epoch 143/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0075 - accuracy: 0.9973 - val_loss: 0.8971 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00143: val_loss did not improve from 0.17371\n",
            "Epoch 144/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0078 - accuracy: 0.9965 - val_loss: 0.8384 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00144: val_loss did not improve from 0.17371\n",
            "Epoch 145/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0109 - accuracy: 0.9950 - val_loss: 0.7959 - val_accuracy: 0.9041\n",
            "\n",
            "Epoch 00145: val_loss did not improve from 0.17371\n",
            "Epoch 146/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0145 - accuracy: 0.9950 - val_loss: 0.6895 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00146: val_loss did not improve from 0.17371\n",
            "Epoch 147/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0148 - accuracy: 0.9941 - val_loss: 0.7404 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00147: val_loss did not improve from 0.17371\n",
            "Epoch 148/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0111 - accuracy: 0.9964 - val_loss: 0.6666 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00148: val_loss did not improve from 0.17371\n",
            "Epoch 149/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0143 - accuracy: 0.9954 - val_loss: 0.7547 - val_accuracy: 0.9354\n",
            "\n",
            "Epoch 00149: val_loss did not improve from 0.17371\n",
            "Epoch 150/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0157 - accuracy: 0.9951 - val_loss: 0.6738 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00150: val_loss did not improve from 0.17371\n",
            "Epoch 151/2000\n",
            "7/7 [==============================] - 0s 24ms/step - loss: 0.0148 - accuracy: 0.9961 - val_loss: 0.6474 - val_accuracy: 0.9256\n",
            "\n",
            "Epoch 00151: val_loss did not improve from 0.17371\n",
            "Epoch 152/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0214 - accuracy: 0.9965 - val_loss: 0.5423 - val_accuracy: 0.9276\n",
            "\n",
            "Epoch 00152: val_loss did not improve from 0.17371\n",
            "Epoch 153/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0087 - accuracy: 0.9978 - val_loss: 0.6131 - val_accuracy: 0.9256\n",
            "\n",
            "Epoch 00153: val_loss did not improve from 0.17371\n",
            "Epoch 154/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0072 - accuracy: 0.9962 - val_loss: 0.7111 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00154: val_loss did not improve from 0.17371\n",
            "Epoch 155/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0060 - accuracy: 0.9971 - val_loss: 0.8019 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00155: val_loss did not improve from 0.17371\n",
            "Epoch 156/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0071 - accuracy: 0.9974 - val_loss: 0.7614 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00156: val_loss did not improve from 0.17371\n",
            "Epoch 157/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0141 - accuracy: 0.9965 - val_loss: 0.7003 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00157: val_loss did not improve from 0.17371\n",
            "Epoch 158/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0112 - accuracy: 0.9965 - val_loss: 0.6385 - val_accuracy: 0.9315\n",
            "\n",
            "Epoch 00158: val_loss did not improve from 0.17371\n",
            "Epoch 159/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0160 - accuracy: 0.9940 - val_loss: 0.6428 - val_accuracy: 0.9100\n",
            "\n",
            "Epoch 00159: val_loss did not improve from 0.17371\n",
            "Epoch 160/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0141 - accuracy: 0.9931 - val_loss: 0.5907 - val_accuracy: 0.9354\n",
            "\n",
            "Epoch 00160: val_loss did not improve from 0.17371\n",
            "Epoch 161/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0078 - accuracy: 0.9971 - val_loss: 0.6179 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00161: val_loss did not improve from 0.17371\n",
            "Epoch 162/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0065 - accuracy: 0.9977 - val_loss: 0.7275 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00162: val_loss did not improve from 0.17371\n",
            "Epoch 163/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0052 - accuracy: 0.9974 - val_loss: 0.7631 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00163: val_loss did not improve from 0.17371\n",
            "Epoch 164/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0083 - accuracy: 0.9962 - val_loss: 0.7609 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00164: val_loss did not improve from 0.17371\n",
            "Epoch 165/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0059 - accuracy: 0.9966 - val_loss: 0.7725 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00165: val_loss did not improve from 0.17371\n",
            "Epoch 166/2000\n",
            "7/7 [==============================] - 0s 23ms/step - loss: 0.0070 - accuracy: 0.9977 - val_loss: 0.8023 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00166: val_loss did not improve from 0.17371\n",
            "Epoch 167/2000\n",
            "7/7 [==============================] - 0s 23ms/step - loss: 0.0121 - accuracy: 0.9957 - val_loss: 0.6658 - val_accuracy: 0.9080\n",
            "\n",
            "Epoch 00167: val_loss did not improve from 0.17371\n",
            "Epoch 168/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0058 - accuracy: 0.9980 - val_loss: 0.6769 - val_accuracy: 0.9256\n",
            "\n",
            "Epoch 00168: val_loss did not improve from 0.17371\n",
            "Epoch 169/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0096 - accuracy: 0.9958 - val_loss: 0.6683 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00169: val_loss did not improve from 0.17371\n",
            "Epoch 170/2000\n",
            "7/7 [==============================] - 0s 23ms/step - loss: 0.0044 - accuracy: 0.9987 - val_loss: 0.7484 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00170: val_loss did not improve from 0.17371\n",
            "Epoch 171/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0034 - accuracy: 0.9991 - val_loss: 0.8252 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00171: val_loss did not improve from 0.17371\n",
            "Epoch 172/2000\n",
            "7/7 [==============================] - 0s 23ms/step - loss: 0.0032 - accuracy: 0.9985 - val_loss: 0.8442 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00172: val_loss did not improve from 0.17371\n",
            "Epoch 173/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0043 - accuracy: 0.9977 - val_loss: 0.8697 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00173: val_loss did not improve from 0.17371\n",
            "Epoch 174/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0025 - accuracy: 0.9982 - val_loss: 0.8632 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00174: val_loss did not improve from 0.17371\n",
            "Epoch 175/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0038 - accuracy: 0.9977 - val_loss: 0.8565 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00175: val_loss did not improve from 0.17371\n",
            "Epoch 176/2000\n",
            "7/7 [==============================] - 0s 23ms/step - loss: 0.0042 - accuracy: 0.9985 - val_loss: 0.8543 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00176: val_loss did not improve from 0.17371\n",
            "Epoch 177/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0055 - accuracy: 0.9977 - val_loss: 0.8197 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00177: val_loss did not improve from 0.17371\n",
            "Epoch 178/2000\n",
            "7/7 [==============================] - 0s 23ms/step - loss: 0.0026 - accuracy: 0.9989 - val_loss: 0.8166 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00178: val_loss did not improve from 0.17371\n",
            "Epoch 179/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0019 - accuracy: 0.9990 - val_loss: 0.8395 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00179: val_loss did not improve from 0.17371\n",
            "Epoch 180/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0023 - accuracy: 0.9985 - val_loss: 0.8972 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00180: val_loss did not improve from 0.17371\n",
            "Epoch 181/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0020 - accuracy: 0.9989 - val_loss: 0.9300 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00181: val_loss did not improve from 0.17371\n",
            "Epoch 182/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0020 - accuracy: 0.9991 - val_loss: 0.9483 - val_accuracy: 0.9139\n",
            "\n",
            "Epoch 00182: val_loss did not improve from 0.17371\n",
            "Epoch 183/2000\n",
            "7/7 [==============================] - 0s 20ms/step - loss: 0.0017 - accuracy: 0.9994 - val_loss: 0.9843 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00183: val_loss did not improve from 0.17371\n",
            "Epoch 184/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0015 - accuracy: 0.9992 - val_loss: 1.0137 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00184: val_loss did not improve from 0.17371\n",
            "Epoch 185/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0022 - accuracy: 0.9985 - val_loss: 1.0335 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00185: val_loss did not improve from 0.17371\n",
            "Epoch 186/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0014 - accuracy: 0.9993 - val_loss: 1.0405 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00186: val_loss did not improve from 0.17371\n",
            "Epoch 187/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0014 - accuracy: 0.9993 - val_loss: 1.0348 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00187: val_loss did not improve from 0.17371\n",
            "Epoch 188/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0017 - accuracy: 0.9998 - val_loss: 1.0296 - val_accuracy: 0.9237\n",
            "\n",
            "Epoch 00188: val_loss did not improve from 0.17371\n",
            "Epoch 189/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0024 - accuracy: 0.9981 - val_loss: 1.0335 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00189: val_loss did not improve from 0.17371\n",
            "Epoch 190/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0022 - accuracy: 0.9988 - val_loss: 1.0438 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00190: val_loss did not improve from 0.17371\n",
            "Epoch 191/2000\n",
            "7/7 [==============================] - 0s 23ms/step - loss: 0.0012 - accuracy: 0.9992 - val_loss: 1.0573 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00191: val_loss did not improve from 0.17371\n",
            "Epoch 192/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0015 - accuracy: 0.9992 - val_loss: 1.0711 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00192: val_loss did not improve from 0.17371\n",
            "Epoch 193/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0019 - accuracy: 0.9988 - val_loss: 1.0816 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00193: val_loss did not improve from 0.17371\n",
            "Epoch 194/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0012 - accuracy: 0.9991 - val_loss: 1.0932 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00194: val_loss did not improve from 0.17371\n",
            "Epoch 195/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 1.1070 - val_accuracy: 0.9217\n",
            "\n",
            "Epoch 00195: val_loss did not improve from 0.17371\n",
            "Epoch 196/2000\n",
            "7/7 [==============================] - 0s 23ms/step - loss: 0.0022 - accuracy: 0.9981 - val_loss: 1.1175 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00196: val_loss did not improve from 0.17371\n",
            "Epoch 197/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0011 - accuracy: 0.9993 - val_loss: 1.1273 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00197: val_loss did not improve from 0.17371\n",
            "Epoch 198/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0013 - accuracy: 0.9997 - val_loss: 1.1412 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00198: val_loss did not improve from 0.17371\n",
            "Epoch 199/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 9.6328e-04 - accuracy: 0.9991 - val_loss: 1.1503 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00199: val_loss did not improve from 0.17371\n",
            "Epoch 200/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 7.5381e-04 - accuracy: 0.9995 - val_loss: 1.1600 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00200: val_loss did not improve from 0.17371\n",
            "Epoch 201/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0012 - accuracy: 0.9993 - val_loss: 1.1657 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00201: val_loss did not improve from 0.17371\n",
            "Epoch 202/2000\n",
            "7/7 [==============================] - 0s 21ms/step - loss: 0.0013 - accuracy: 0.9994 - val_loss: 1.1631 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00202: val_loss did not improve from 0.17371\n",
            "Epoch 203/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 1.1491 - val_accuracy: 0.9178\n",
            "\n",
            "Epoch 00203: val_loss did not improve from 0.17371\n",
            "Epoch 204/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0019 - accuracy: 0.9985 - val_loss: 1.1407 - val_accuracy: 0.9198\n",
            "\n",
            "Epoch 00204: val_loss did not improve from 0.17371\n",
            "Epoch 205/2000\n",
            "7/7 [==============================] - 0s 22ms/step - loss: 0.0018 - accuracy: 0.9990 - val_loss: 1.1414 - val_accuracy: 0.9159\n",
            "\n",
            "Epoch 00205: val_loss did not improve from 0.17371\n",
            "Epoch 00205: early stopping\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IqKvrGExQYnC"
      },
      "source": [
        "import pickle as pkl\n",
        "model = Sequential()\n",
        "model.add(Dense(100,input_dim=10,activation='relu'))\n",
        "model.add(Dense(1000,activation='relu'))\n",
        "model.add(Dense(10000,activation='relu'))\n",
        "model.add(Dense(1000,activation='relu'))\n",
        "model.add(Dense(100,activation='relu'))\n",
        "model.add(Dense(10,activation='relu'))\n",
        "model.add(Dense(1,activation='sigmoid'))\n",
        "model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
        "model.load_weights('best_model.h5')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "muNv77JYSZ5f",
        "outputId": "1201caef-eece-42a4-bd34-5d5ea0abfdae"
      },
      "source": [
        "model.evaluate(ss_test_X,test_y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "32/32 [==============================] - 1s 2ms/step - loss: 0.1616 - accuracy: 0.9493\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.1728934347629547, 0.951076328754425]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZVsiYwA6SkFP",
        "outputId": "e8d323d9-fab0-4c02-c289-97cbddb6bde0"
      },
      "source": [
        "from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n",
        "p = model.predict(ss_test_X)\n",
        "predictions = [int(x>0.5) for x in p]\n",
        "print(f'Accuracy: {accuracy_score(test_y,predictions)}')\n",
        "print(f'Precision: {precision_score(test_y,predictions)}')\n",
        "print(f'Recall: {recall_score(test_y,predictions)}')\n",
        "print(f'F1 Score: {f1_score(test_y,predictions)}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy: 0.9510763209393346\n",
            "Precision: 0.9510763209393346\n",
            "Recall: 1.0\n",
            "F1 Score: 0.9749247743229689\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}